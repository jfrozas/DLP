1.1 Multi-line expressions

    let 
        x = 1
    in
        succ x
    ;;

    Result:
        Nat : 2

1.2 Pretty-printer

    lambda x : Nat. x;;

    Result:
        Nat -> Nat : lambda x:Nat. x

    letrec sum : Nat -> Nat -> Nat =
            lambda n : Nat. lambda m : Nat. if iszero n then m else succ (sum (pred n) m) in
    sum
    ;;

    Result:
        Nat -> Nat -> Nat : lambda n:Nat. lambda m:Nat. if iszero n then m else succ (((fix (lambda sum:Nat -> Nat -> Nat. lambda n:Nat. lambda m:Nat. if iszero n then m else succ ((sum (pred n)) m))) (pred n)) m)

2.1 Recursion

    Sum:

        letrec sum : Nat -> Nat -> Nat =
            lambda n : Nat. lambda m : Nat. if iszero n then m else succ (sum (pred n) m) in
        sum 21 34
        ;;

        Result:
            Nat : 55

    Product:

        letrec sum : Nat -> Nat -> Nat =
            lambda n : Nat. lambda m : Nat. if iszero n then m else succ (sum (pred n) m)
        in
            letrec prod : Nat -> Nat -> Nat =
                lambda n : Nat. lambda m : Nat. if iszero m then 0 else sum n (prod n (pred m))
            in
                prod 12 5
        ;;

        Result:
            Nat : 60


    Fibonacci:

        letrec sum : Nat -> Nat -> Nat =
            lambda n : Nat. lambda m : Nat. if iszero n then m else succ (sum (pred n) m)
        in
            letrec fib : Nat -> Nat =
                lambda n : Nat.
                    if iszero n then 0
                    else if iszero (pred n) then 1
                    else sum (fib (pred n)) (fib (pred (pred n)))
            in
                fib 7
        ;;

        Result:
            Nat : 13

    Factorial:

        letrec sum : Nat -> Nat -> Nat =
            lambda n : Nat. lambda m : Nat. if iszero n then m else succ (sum (pred n) m)
        in
            letrec prod : Nat -> Nat -> Nat =
                lambda n : Nat. lambda m : Nat. if iszero m then 0 else sum n (prod n (pred m))
            in
                letrec factorial : Nat -> Nat =
                    lambda n : Nat.
                        if iszero n then 1
                        else prod n (factorial (pred n))
                in
                    factorial 5
        ;;

        Result:
            Nat : 120
    
    

    lambda n:Nat. lambda m:Nat. if iszero n then m else succ (((fix (lambda sum:Nat -> Nat -> Nat. lambda n:Nat. lambda m:Nat. if iszero n then m else succ ((sum (pred n)) m))) (pred n)) m)

    Result:
        Nat -> Nat -> Nat : lambda n:Nat. lambda m:Nat. if iszero n then m else succ (((fix (lambda sum:Nat -> Nat -> Nat. lambda n:Nat. lambda m:Nat. if iszero n then m else succ ((sum (pred n)) m))) (pred n)) m)

2.2 Global definitions context

    x = 3;;

    Result:
        Nat : x = 3

    f = lambda y : Nat. x;;

    Result:
        Nat -> Nat : f = lambda y:Nat. 3

    f 1;;

    Result:
        Nat : 3

    x = 4;;

    Result:
        Nat : x = 4

    f 1;;

    Result:
        Nat : 3

    N = Nat;;

    Result:
        Nat : N = Nat

    NinN = N -> N;;

    Result:
        N -> N : NinN = Nat -> Nat

    N3 = N -> NinN;;

    Result:
        N -> NinN : N3 = Nat -> Nat -> Nat


2.3 Strig type 

    lambda s : String. s ;;

    Result:
        String -> String : lambda s:String. s

    (lambda s : String. s) "abc";;

    Result:
        String : "abc"

    letrec replicate : String -> Nat -> String = 
        lambda s : String. lambda n : Nat.
            if iszero n then "" else concat s (replicate s (pred n))
    in
        replicate "abc" 3
    ;;

    Result:
        String : "abcabcabc"

    'a';;

    Result:
        Char : 'a'

    a = "hola";;

    Result:
        String : a = "hola"

    length a;;

    Result:
        Nat : 4

    get a 2;;

    Result:
        Char : 'l'


2.4 Tuplas


    {true, 4, 2, "hola"};;

    Result:
        {Bool, Nat, Nat, String} : {true, 4, 2, "hola"}

    {true, 3, {"hola"}};;

    Result:
        {Bool, Nat, {String}} : {true, 3, {"hola"}}

    {true, 3, {"hola"}}.2;;

    Result:
        Nat : 3

    {true, 3, {"hola"}}.3;;

    Result:
        {String} : {"hola"}

    {true, 3, {"hola"}}.3.1;;

    Result:
        String : "hola"

    a = {true, 3, {"hola", 6}};;

    Result:
        {Bool, Nat, {String, Nat}} : a = {true, 3, {"hola", 6}}

    a.1;;

    Result:
        Bool : true

    a.3.2;;

    Result:
        Nat : 6


2.5 Registros

    {x=2, y=5, z=0};;

    Result:
        {Nat, Nat, Nat} : {x = 2, y = 5, z = 0}

    {x=2, y=5, z=0}.x;;

    Result:
        Nat : 2

    p = {na={"luis", "vidal"}, e = 28};;

    Result:
        {{String, String}, Nat} : p = {na = {"luis", "vidal"}, e = 28}

    p.na;;

    Result:
        {String, String} : {"luis", "vidal"}

    p.na.1;;

    Result:
        String : "luis"

    p.na.2;;

    Result:
        String : "vidal"

    p.e;;

    Result:
        Nat : 28

2.6 Variantes

    Int = <pos:Nat, zero:Bool, neg:Nat>;;

    Result:
        <pos:Nat, zero:Bool, neg:Nat> : Int = pos:Nat, zero:Bool, neg:Nat

    p3 = <pos=3> as Int;;

    Result:
        Int : p3 = Int = <pos = 3>

    z0 = <zero=true> as Int;;

    Result:
        Int : z0 = Int = <zero = true>

    n5 = <neg=5> as Int;;

    Result:
        Int : n5 = Int = <neg = 5>

    is_zero = L i : Int.
        case i of
        <pos=p> => false
        | <zero=z> => true
        | <neg=n> => false
    ;;

    Result:
        Int -> Bool : is_zero = lambda i:Int. case i of <pos = p> => false
        | <zero = z> => true
        | <neg = n> => false

    is_zero p3;;

    Result:
        Bool : false

    is_zero z0;;

    Result:
        Bool : true

    is_zero n5;;

    Result:
        Bool : false

    abs = L i : Int.
        case i of 
          <pos=p> => (<pos=p> as Int)
        | <zero=z> => (<zero=true> as Int)
        | <neg=n> => (<pos=n> as Int)
    ;;

    Result:
        Int -> Int : abs = lambda i:Int. case i of <pos = p> => Int = <pos = p>
        | <zero = z> => Int = <zero = true>
        | <neg = n> => Int = <pos = n>

    abs p3;;

    Result:
        Int : Int = <pos = 3>

    abs z0;;

    Result:
        Int : Int = <zero = true>

    abs n5;;

    Result:
        Int : Int = <pos = 5>



    letrec sum : Nat -> Nat -> Nat =
            lambda n : Nat. lambda m : Nat. if iszero n then m else succ (sum (pred n) m) 
    in
    letrec sub : Nat -> Nat -> Nat =
        lambda a : Nat. lambda b : Nat.
            if iszero b then a
            else sub (pred a) (pred b)
    in
    letrec menor : Nat -> Nat -> Bool =
        lambda x : Nat. lambda y : Nat.
            iszero (sub x y)
    in
    letrec mayor : Nat -> Nat -> Bool =
        lambda x : Nat. lambda y : Nat.
            iszero (sub y x)
    in letrec add : Int -> Int -> Int =
        lambda x : Int. lambda y : Int.
            case x of
            <pos=n1> =>
                (case y of
                <pos=n2> => (<pos=(sum n1 n2)> as Int)
                | <zero=true> => (<pos=n1> as Int)
                | <neg=n2> => (if menor n1 n2 then if mayor n1 n2 then <zero=true> as Int else <neg=(sub n2 n1)> as Int else <pos=(sub n1 n2)> as Int)) 
            | <zero=true> => y
            | <neg=n1> =>
                (case y of
                <pos=n2> => (if menor n1 n2 then if mayor n1 n2 then <zero=true> as Int else <pos=(sub n2 n1)> as Int else <neg=(sub n1 n2)> as Int)
                | <zero=true> => (<neg=n1> as Int)
                | <neg=n2> => (<neg=(sum n1 n2)> as Int))
        in add p3 n5;;

    Result:
        Int : Int = <neg = 2>



